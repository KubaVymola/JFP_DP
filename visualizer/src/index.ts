import { app, BrowserWindow, dialog, ipcMain } from "electron";
import fs from 'fs';
import path from 'path';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
    app.quit();
}

let mainWindow: BrowserWindow;

const createWindow = (): void => {
    // Create the browser window.
    mainWindow = new BrowserWindow({
        width: 1000,
        height: 600,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        },
    });

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
    // mainWindow.loadFile(path.join(__dirname, 'index.html'));

    // Open the DevTools.
    mainWindow.webContents.openDevTools({ mode: 'detach' });

};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);
app.whenReady().then(() => {
    ipcMain.handle('dialog:openFile', (event, options) => {
        console.log('options', options);
        
        const filePaths = dialog.showOpenDialogSync(mainWindow, options);

        if (!filePaths || !filePaths[0]) return null;

        return {
            path: filePaths[0],
            directory: path.dirname(filePaths[0]),
            fileName: path.basename(filePaths[0]),   
        };
    });

    ipcMain.handle('file:read', (event, filePath: string, options: any): string | Buffer => {
        return fs.readFileSync(filePath, options);
    });

    ipcMain.handle('path:join', (event, ...args) => {
        return path.join(...args);
    })
})

// ipcMain.on('file:open', (event, args) => {
//     console.log(args);

//     mainWindow.webContents.send('file:data', 'the data');
// });

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
    if (process.platform !== "darwin") {
        app.quit();
    }
});

app.on("activate", () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
